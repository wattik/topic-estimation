#!/usr/bin/python
# -*- coding: utf-8 -*-

__author__ = 'Wattik'


class Topic(object):

    # etc. Type=(category, article) ...... TODO: is needed?

    def __init__(self, topic, hierarchy_level, generating_ngram):
        self.generating_ngram = generating_ngram
        self.hierarchy_level = hierarchy_level
        self.topic = topic

    def __repr__(self):
        return self.topic + ' generated by ' + self.generating_ngram + ' at level ' + unicode(self.hierarchy_level)

    def __eq__(self, other):
        return other.topic == self.topic

    def __cmp__(self, other):
        return self.__cmp__(other)

    def __hash__(self):
        return self.topic.__hash__()

class Token2Topic(object):


    def __init__(self, wiki, level):
        self.level = level
        self.wiki = wiki

    """
    Returns a list of Topics()
    """
    def get_topics(self, token):

        parent_topic = Topic(token, 0, None)

        topics = self._dfs_over_categories(parent_topic)


        return topics

    """
    Depth-first search throughout categories.
    """
    def _dfs_over_categories(self, topic):

        output = [topic]

        level = topic.hierarchy_level + 1

        # If we reached the deepest level, then exit.
        if level > self.level:
            return output

        supercategories = self.wiki.get_page_categories(topic.topic)
        list_of_topics = self._categories2topics(supercategories, topic.topic, level)

        for supertopic in list_of_topics:
                output = output + self._dfs_over_categories(supertopic)

        return output

    def _categories2topics(self, subcategories, ngram, level):
        topics = list()
        for subcategory in subcategories:
            topics.append(Topic(subcategory, level, ngram))

        return topics

